C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE HMC5883L_I2C_BOOT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\HMC5883L_I2C_BOOT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\HMC5883L_I2C_BOOT.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\HMC5883L_I2C
                    -_BOOT.lst) CD DB NOIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\HMC5883L
                    -_I2C_BOOT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: HMC5883L_I2C_BOOT.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the source code of bootloader communication APIs for the
   7          *  I2C component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "HMC5883L_I2C_PVT.h"
  19          
  20          #if defined(CYDEV_BOOTLOADER_IO_COMP) && (HMC5883L_I2C_BOOTLOADER_INTERFACE_ENABLED)
              
              
              /***************************************
              *    Bootloader Internal Variables
              ***************************************/
              
              /* I2C write buffer: Host writes command here */
              static uint8 XDATA HMC5883L_I2C_slReadBuf[HMC5883L_I2C_BTLDR_SIZEOF_READ_BUFFER];
              
              /* I2C read buffer: Host reads responses from it */
              static uint8 XDATA HMC5883L_I2C_slWriteBuf[HMC5883L_I2C_BTLDR_SIZEOF_WRITE_BUFFER];
              
              
              /*******************************************************************************
              * Function Name: HMC5883L_I2C_CyBtldrCommStart
              ********************************************************************************
              *
              * Summary:
              *  Starts the communication component and enables the interrupt.
              *  The read buffer initial state is full and the read always is 0xFFu.
              *  The write buffer is clear and ready to receive a commmand.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              * Side Effects:
              *  This fucntion enables component interrupt. If I2C is enabled
              *  without the interrupt enabled, it could lock up the I2C bus.
              *
C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 2   

              * Global variables:
              *  HMC5883L_I2C_slWriteBuf - used to store received command.
              *  HMC5883L_I2C_slReadBuf - used to store response.
              *  HMC5883L_I2C_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              void HMC5883L_I2C_CyBtldrCommStart(void) CYSMALL 
              {
                  /* Set Write buffer */
                  HMC5883L_I2C_SlaveInitWriteBuf(HMC5883L_I2C_slWriteBuf, HMC5883L_I2C_BTLDR_SIZEOF_WRITE_BUFFER);
              
                  /* Set Read buffer which has zero elements */
                  HMC5883L_I2C_SlaveInitReadBuf(HMC5883L_I2C_slReadBuf, 0u);
              
                  /* Enable power to I2C Module */
                  HMC5883L_I2C_Start();
              }
              
              
              /*******************************************************************************
              * Function Name: HMC5883L_I2C_CyBtldrCommStop
              ********************************************************************************
              *
              * Summary:
              *  Disables the communication component and disables the interrupt.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              *******************************************************************************/
              void HMC5883L_I2C_CyBtldrCommStop(void) CYSMALL 
              {
                  /* Stop I2C component */
                  HMC5883L_I2C_Stop();
              }
              
              
              /*******************************************************************************
              * Function Name: HMC5883L_I2C_CyBtldrCommReset
              ********************************************************************************
              *
              * Summary:
              *  Set buffers to the initial state and reset the statuses.
              *  The read buffer initial state is full and the read always is 0xFFu.
              *  The write buffer is clear and ready to receive a commmand.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              * Global variables:
              *  HMC5883L_I2C_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              void HMC5883L_I2C_CyBtldrCommReset(void) CYSMALL 
C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 3   

              {
                  /* Make the Read buffer full */
                  HMC5883L_I2C_slRdBufSize = 0u;
              
                  /* Reset Write buffer and Read buffer */
                  HMC5883L_I2C_slRdBufIndex = 0u;
                  HMC5883L_I2C_slWrBufIndex = 0u;
              
                  /* Clear read and write status */
                  HMC5883L_I2C_slStatus = 0u;
              }
              
              
              /*******************************************************************************
              * Function Name: HMC5883L_I2C_CyBtldrCommWrite
              ********************************************************************************
              *
              * Summary:
              *  Transmits the status of executed command to the Host.
              *  The function updates the I2C read buffer with response and realeases it to
              *  the host. All reads return 0xFF till the buffer will be released. All bytes
              *  are transfered by the I2C ISR.
              *  The function waits with timeout till all bytes will be read.
              *  After exist this function the reads return 0xFF.
              *
              * Parameters:
              *  pData:    pointer to data buffer with response command.
              *  size:     number of bytes required to be transmitted.
              *  count:    actual size of data was transmitted.
              *  timeOut:  timeout value in tries of 10uS.
              *
              * Return:
              *  Status of transmit operation.
              *
              * Global variables:
              *  HMC5883L_I2C_slReadBuf - used to store response.
              *  HMC5883L_I2C_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              cystatus HMC5883L_I2C_CyBtldrCommWrite(const uint8 pData[], uint16 size, uint16 * count, uint8 timeOut) CY
             -SMALL
                       
              {
                  cystatus status;
                  uint16 timeoutMs;
              
                  status = CYRET_BAD_PARAM;
              
                  if((NULL != pData) && (size > 0u))
                  {
                      status = CYRET_TIMEOUT;
                      timeoutMs = ((uint16) 10u * timeOut);  /* Convert from 10mS check to 1mS checks */
              
                      /* Copy pData to component buffer */
                      (void) memcpy((void *) HMC5883L_I2C_slReadBuf, (void *) pData, size);
                      *count = size;  /* Buffer was copied to I2C buffer */
              
                      /* The buffer is free to be read */
                      HMC5883L_I2C_slRdBufSize = ((uint8) size);
              
                      while(0u != timeoutMs)  /* Wait till response will be read */
C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 4   

                      {
                          /* Check if host complete read */
                          if(HMC5883L_I2C_slRdBufIndex == ((uint8) size))
                          {
                              HMC5883L_I2C_slRdBufSize  = 0u;
                              HMC5883L_I2C_slRdBufIndex = 0u;
              
                              status = CYRET_SUCCESS;
                              break;
                          }
              
                          CyDelay(HMC5883L_I2C_WAIT_1_MS);
                          timeoutMs--;
                      }
                  }
              
                  return(status);
              }
              
              
              /*******************************************************************************
              * Function Name: HMC5883L_I2C_CyBtldrCommRead
              ********************************************************************************
              *
              * Summary:
              *  Receives the command from the Host.
              *  All bytes are received by the I2C ISR and stored in internal I2C buffer. The
              *  function checks status with timeout to detemine the end of transfer and
              *  then copy data to bootloader buffer.
              *  After exist this function the I2C ISR is able to receive more data.
              *
              * Parameters:
              *  pData:    pointer to data buffer to store command.
              *  size:     maximum number of bytes which could to be passed back.
              *  count:    actual size of data was received.
              *  timeOut:  timeout value in tries of 10uS.
              *
              * Return:
              *  Status of receive operation.
              *
              * Global variables:
              *  HMC5883L_I2C_slWriteBuf - used to store received command.
              *
              *******************************************************************************/
              cystatus HMC5883L_I2C_CyBtldrCommRead(uint8 pData[], uint16 size, uint16 * count, uint8 timeOut) CYSMALL
                       
              {
                  cystatus status;
                  uint16 timeoutMs;
                  uint8 byteCount;
              
                  status = CYRET_BAD_PARAM;
              
                  if((NULL != pData) && (size > 0u))
                  {
                      status = CYRET_TIMEOUT;
                      timeoutMs = ((uint16) 10u * timeOut);  /* Convert from 10mS checks to 1mS checks */
              
                      while(0u != timeoutMs)  /* Wait for command from the host */
                      {
                          /* Check if the host complete write */
                          if(0u != (HMC5883L_I2C_slStatus & HMC5883L_I2C_SSTAT_WR_CMPLT))
C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 5   

                          {
                              /* How many bytes the host has been written */
                              byteCount = HMC5883L_I2C_slWrBufIndex;
                              *count = (uint16) byteCount;
              
                              /* Copy command to pData buffer */
                              (void) memcpy((void *) pData, (void *) HMC5883L_I2C_slWriteBuf,
                                            HMC5883L_I2C_MIN_UNT16(byteCount, size));
              
                              /* Clear I2C write buffer and status */
                              HMC5883L_I2C_slStatus     = 0u;
                              HMC5883L_I2C_slWrBufIndex = 0u;
              
                              status = CYRET_SUCCESS;
                              break;
                          }
              
                          CyDelay(HMC5883L_I2C_WAIT_1_MS);
                          timeoutMs--;
                      }
                  }
              
                  return(status);
              }
              
              #endif /* defined(CYDEV_BOOTLOADER_IO_COMP) && (HMC5883L_I2C_BOOTLOADER_INTERFACE_ENABLED) */
 264          
 265          
 266          /* [] END OF FILE */
C51 COMPILER V9.51   HMC5883L_I2C_BOOT                                                     07/17/2014 14:37:06 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
