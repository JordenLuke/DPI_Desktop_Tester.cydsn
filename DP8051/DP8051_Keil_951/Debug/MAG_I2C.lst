C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAG_I2C
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\MAG_I2C.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\MAG_I2C.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\MAG_I2C.lst) CD DB NOI
                    -P OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\MAG_I2C.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: MAG_I2C.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the source code of APIs for the I2C component.
   7          *  Actual protocol and operation code resides in the interrupt service routine
   8          *  file.
   9          *
  10          * Note:
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation. All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "MAG_I2C_PVT.h"
  20          
  21          
  22          /**********************************
  23          *      System variables
  24          **********************************/
  25          
  26          uint8 MAG_I2C_initVar = 0u;    /* Defines if component was initialized */
  27          
  28          volatile uint8 MAG_I2C_state;  /* Current state of I2C FSM */
  29          
  30          
  31          /*******************************************************************************
  32          * Function Name: MAG_I2C_Init
  33          ********************************************************************************
  34          *
  35          * Summary:
  36          *  Initializes I2C registers with initial values provided from customizer.
  37          *
  38          * Parameters:
  39          *  None
  40          *
  41          * Return:
  42          *  None
  43          *
  44          * Global variables:
  45          *  None
  46          *
  47          * Reentrant:
  48          *  No
  49          *
  50          *******************************************************************************/
  51          void MAG_I2C_Init(void) 
  52          {
  53   1          #if(MAG_I2C_FF_IMPLEMENTED)
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 2   

                      MAG_I2C_CFG_REG  = MAG_I2C_DEFAULT_CFG;
                      MAG_I2C_XCFG_REG = MAG_I2C_DEFAULT_XCFG;
              
                      #if(CY_PSOC5A)
                          MAG_I2C_CLKDIV_REG  = LO8(MAG_I2C_DEFAULT_DIVIDE_FACTOR);
                      #else
                          MAG_I2C_CLKDIV1_REG = LO8(MAG_I2C_DEFAULT_DIVIDE_FACTOR);
                          MAG_I2C_CLKDIV2_REG = HI8(MAG_I2C_DEFAULT_DIVIDE_FACTOR);
                      #endif /* (CY_PSOC5A) */
              
                  #else
  65   1              uint8 enableInterrupts;
  66   1      
  67   1              MAG_I2C_CFG_REG      = MAG_I2C_DEFAULT_CFG;      /* control  */
  68   1              MAG_I2C_INT_MASK_REG = MAG_I2C_DEFAULT_INT_MASK; /* int_mask */
  69   1      
  70   1              /* Enable interrupts from block */
  71   1              enableInterrupts = CyEnterCriticalSection();
  72   1              MAG_I2C_INT_ENABLE_REG |= MAG_I2C_INTR_ENABLE; /* aux_ctl */
  73   1              CyExitCriticalSection(enableInterrupts);
  74   1      
  75   1              #if(MAG_I2C_MODE_MASTER_ENABLED)
  76   1                  MAG_I2C_MCLK_PRD_REG = MAG_I2C_DEFAULT_MCLK_PRD;
  77   1                  MAG_I2C_MCLK_CMP_REG = MAG_I2C_DEFAULT_MCLK_CMP;
  78   1               #endif /* (MAG_I2C_MODE_MASTER_ENABLED) */
  79   1      
  80   1              #if(MAG_I2C_MODE_SLAVE_ENABLED)
                          MAG_I2C_PERIOD_REG = MAG_I2C_DEFAULT_PERIOD;
                      #endif  /* (MAG_I2C_MODE_SLAVE_ENABLED) */
  83   1      
  84   1          #endif /* (MAG_I2C_FF_IMPLEMENTED) */
  85   1      
  86   1          #if(MAG_I2C_TIMEOUT_ENABLED)
                      MAG_I2C_TimeoutInit();
                  #endif /* (MAG_I2C_TIMEOUT_ENABLED) */
  89   1      
  90   1          /* Disable Interrupt and set vector and priority */
  91   1          CyIntDisable    (MAG_I2C_ISR_NUMBER);
  92   1          CyIntSetPriority(MAG_I2C_ISR_NUMBER, MAG_I2C_ISR_PRIORITY);
  93   1          #if(MAG_I2C_INTERN_I2C_INTR_HANDLER)
  94   1              (void) CyIntSetVector(MAG_I2C_ISR_NUMBER, &MAG_I2C_ISR);
  95   1          #endif /* (MAG_I2C_INTERN_I2C_INTR_HANDLER) */
  96   1      
  97   1      
  98   1          /* Put state machine in idle state */
  99   1          MAG_I2C_state = MAG_I2C_SM_IDLE;
 100   1      
 101   1          #if(MAG_I2C_MODE_SLAVE_ENABLED)
                      /* Reset status and buffers index */
                      MAG_I2C_SlaveClearReadBuf();
                      MAG_I2C_SlaveClearWriteBuf();
                      MAG_I2C_slStatus = 0u; /* Reset slave status */
              
                      /* Set default address */
                      MAG_I2C_SlaveSetAddress(MAG_I2C_DEFAULT_ADDR);
                  #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
 110   1      
 111   1          #if(MAG_I2C_MODE_MASTER_ENABLED)
 112   1              /* Reset status and buffers index */
 113   1              MAG_I2C_MasterClearReadBuf();
 114   1              MAG_I2C_MasterClearWriteBuf();
 115   1              (void) MAG_I2C_MasterClearStatus();
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 3   

 116   1          #endif /* (MAG_I2C_MODE_MASTER_ENABLED) */
 117   1      }
 118          
 119          
 120          /*******************************************************************************
 121          * Function Name: MAG_I2C_Enable
 122          ********************************************************************************
 123          *
 124          * Summary:
 125          *  Enables I2C operations.
 126          *
 127          * Parameters:
 128          *  None
 129          *
 130          * Return:
 131          *  None
 132          *
 133          * Global variables:
 134          *  None
 135          *
 136          *******************************************************************************/
 137          void MAG_I2C_Enable(void) 
 138          {
 139   1          #if(MAG_I2C_FF_IMPLEMENTED)
                      uint8 enableInterrupts;
              
                      /* Enable power to I2C FF block */
                      enableInterrupts = CyEnterCriticalSection();
                      MAG_I2C_ACT_PWRMGR_REG  |= MAG_I2C_ACT_PWR_EN;
                      MAG_I2C_STBY_PWRMGR_REG |= MAG_I2C_STBY_PWR_EN;
                      CyExitCriticalSection(enableInterrupts);
              
                  #else
 149   1      
 150   1              #if(MAG_I2C_MODE_SLAVE_ENABLED)
                          uint8 enableInterrupts;
                      #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
 153   1      
 154   1              #if(MAG_I2C_MODE_SLAVE_ENABLED)
                          /* Enable slave bit counter */
                          enableInterrupts = CyEnterCriticalSection();
                          MAG_I2C_COUNTER_AUX_CTL_REG |= MAG_I2C_CNT7_ENABLE;   /* aux_ctl */
                          CyExitCriticalSection(enableInterrupts);
                      #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
 160   1      
 161   1              MAG_I2C_CFG_REG |= MAG_I2C_ENABLE_MS;
 162   1      
 163   1          #endif /* (MAG_I2C_FF_IMPLEMENTED) */
 164   1      
 165   1          #if(MAG_I2C_TIMEOUT_ENABLED)
                      MAG_I2C_TimeoutEnable();
                  #endif /* (MAG_I2C_TIMEOUT_ENABLED) */
 168   1      }
 169          
 170          
 171          /*******************************************************************************
 172          * Function Name: MAG_I2C_Start
 173          ********************************************************************************
 174          *
 175          * Summary:
 176          *  Starts the I2C hardware. Enables Active mode power template bits or clock
 177          *  gating as appropriate. It is required to be executed before I2C bus
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 4   

 178          *  operation.
 179          *  The I2C interrupt remains disabled after this function call.
 180          *
 181          * Parameters:
 182          *  None
 183          *
 184          * Return:
 185          *  None
 186          *
 187          * Side Effects:
 188          *  This component automatically enables it's interrupt.  If I2C is enabled
 189          *  without the interrupt enabled, it could lock up the I2C bus.
 190          *
 191          * Global variables:
 192          *  MAG_I2C_initVar - used to check initial configuration, modified
 193          *  on first function call.
 194          *
 195          * Reentrant:
 196          *  No
 197          *
 198          *******************************************************************************/
 199          void MAG_I2C_Start(void) 
 200          {
 201   1          /* Initialize I2C registers, reset I2C buffer index and clears status */
 202   1          if(0u == MAG_I2C_initVar)
 203   1          {
 204   2              MAG_I2C_Init();
 205   2              MAG_I2C_initVar = 1u; /* Component initialized */
 206   2          }
 207   1      
 208   1          MAG_I2C_Enable();
 209   1          MAG_I2C_EnableInt();
 210   1      }
 211          
 212          
 213          /*******************************************************************************
 214          * Function Name: MAG_I2C_Stop
 215          ********************************************************************************
 216          *
 217          * Summary:
 218          *  Disables I2C hardware and disables I2C interrupt. Disables Active mode power
 219          *  template bits or clock gating as appropriate.
 220          *
 221          * Parameters:
 222          *  None
 223          *
 224          * Return:
 225          *  None
 226          *
 227          *******************************************************************************/
 228          void MAG_I2C_Stop(void) 
 229          {
 230   1          #if((MAG_I2C_FF_IMPLEMENTED)  || \
 231   1              (MAG_I2C_UDB_IMPLEMENTED && MAG_I2C_MODE_SLAVE_ENABLED))
                      uint8 enableInterrupts;
                  #endif /* ((MAG_I2C_FF_IMPLEMENTED)  || \
                             (MAG_I2C_UDB_IMPLEMENTED && MAG_I2C_MODE_SLAVE_ENABLED)) */
 235   1      
 236   1          MAG_I2C_DisableInt();
 237   1      
 238   1          MAG_I2C_DISABLE_INT_ON_STOP;   /* Interrupt on Stop can be enabled by write */
 239   1          (void) MAG_I2C_CSR_REG;        /* Clear CSR reg */
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 5   

 240   1          
 241   1          #if(MAG_I2C_TIMEOUT_ENABLED)
                      MAG_I2C_TimeoutStop();
                  #endif  /* End (MAG_I2C_TIMEOUT_ENABLED) */
 244   1      
 245   1          #if(MAG_I2C_FF_IMPLEMENTED)
                      #if(CY_PSOC3 || CY_PSOC5LP)
                          /* Store registers which are held in reset when Master and Slave bits are cleared */
                          #if(MAG_I2C_MODE_SLAVE_ENABLED)
                              MAG_I2C_backup.addr = MAG_I2C_ADDR_REG;
                          #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
              
                          MAG_I2C_backup.clkDiv1  = MAG_I2C_CLKDIV1_REG;
                          MAG_I2C_backup.clkDiv2  = MAG_I2C_CLKDIV2_REG;
              
              
                          /* Reset FF block */
                          MAG_I2C_CFG_REG &= ((uint8) ~MAG_I2C_ENABLE_MS);
                          CyDelayUs(MAG_I2C_FF_RESET_DELAY);
                          MAG_I2C_CFG_REG |= ((uint8)  MAG_I2C_ENABLE_MS);
              
              
                          /* Restore registers */
                          #if(MAG_I2C_MODE_SLAVE_ENABLED)
                              MAG_I2C_ADDR_REG = MAG_I2C_backup.addr;
                          #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
              
                          MAG_I2C_CLKDIV1_REG = MAG_I2C_backup.clkDiv1;
                          MAG_I2C_CLKDIV2_REG = MAG_I2C_backup.clkDiv2;
              
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
              
                      /* Disable power to I2C block */
                      enableInterrupts = CyEnterCriticalSection();
                      MAG_I2C_ACT_PWRMGR_REG  &= ((uint8) ~MAG_I2C_ACT_PWR_EN);
                      MAG_I2C_STBY_PWRMGR_REG &= ((uint8) ~MAG_I2C_STBY_PWR_EN);
                      CyExitCriticalSection(enableInterrupts);
              
                  #else
 279   1      
 280   1              #if(MAG_I2C_MODE_SLAVE_ENABLED)
                          /* Disable slave bit counter */
                          enableInterrupts = CyEnterCriticalSection();
                          MAG_I2C_COUNTER_AUX_CTL_REG &= ((uint8) ~MAG_I2C_CNT7_ENABLE);
                          CyExitCriticalSection(enableInterrupts);
                      #endif /* (MAG_I2C_MODE_SLAVE_ENABLED) */
 286   1      
 287   1              MAG_I2C_CFG_REG &= ((uint8) ~MAG_I2C_ENABLE_MS);
 288   1      
 289   1          #endif /* (MAG_I2C_FF_IMPLEMENTED) */
 290   1      
 291   1          MAG_I2C_ClearPendingInt();  /* Clear interrupt triggers on reset */
 292   1      
 293   1          MAG_I2C_state = MAG_I2C_SM_IDLE;  /* Reset software FSM */
 294   1      }
 295          
 296          
 297          /* [] END OF FILE */
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION MAG_I2C_Init (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 67
0000 90647B            MOV     DPTR,#0647BH
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0005 90648B            MOV     DPTR,#0648BH
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#enableInterrupts
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0013 90649B            MOV     DPTR,#0649BH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4410              ORL     A,#010H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 76
0026 906420            MOV     DPTR,#06420H
0029 740F              MOV     A,#0FH
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
002C 906430            MOV     DPTR,#06430H
002F 7408              MOV     A,#08H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
0032 9044C8            MOV     DPTR,#044C8H
0035 7401              MOV     A,#01H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0038 7D07              MOV     R5,#07H
003A 7F00              MOV     R7,#00H
003C 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 94
003F 7C00        E     MOV     R4,#HIGH MAG_I2C_ISR
0041 7D00        E     MOV     R5,#LOW MAG_I2C_ISR
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 99
0048 900000      R     MOV     DPTR,#MAG_I2C_state
004B 7410              MOV     A,#010H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
004E 120000      E     LCALL   MAG_I2C_MasterClearReadBuf
                                           ; SOURCE LINE # 114
0051 120000      E     LCALL   MAG_I2C_MasterClearWriteBuf
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 7   

                                           ; SOURCE LINE # 115
0054 120000      E     LCALL   MAG_I2C_MasterClearStatus
                                           ; SOURCE LINE # 117
0057 22                RET     
             ; FUNCTION MAG_I2C_Init (END)

             ; FUNCTION MAG_I2C_Enable (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 161
0000 90647B            MOV     DPTR,#0647BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
000B 22                RET     
             ; FUNCTION MAG_I2C_Enable (END)

             ; FUNCTION MAG_I2C_Start (BEGIN)
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
0000 900000      R     MOV     DPTR,#MAG_I2C_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0008 120000      R     LCALL   MAG_I2C_Init
                                           ; SOURCE LINE # 205
000B 900000      R     MOV     DPTR,#MAG_I2C_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0011         ?C0003:
                                           ; SOURCE LINE # 208
0011 120000      R     LCALL   MAG_I2C_Enable
                                           ; SOURCE LINE # 209
0014 9044C0            MOV     DPTR,#044C0H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
001A 22                RET     
             ; FUNCTION MAG_I2C_Start (END)

             ; FUNCTION MAG_I2C_Stop (BEGIN)
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 236
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0006 90648B            MOV     DPTR,#0648BH
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
C51 COMPILER V9.51   MAG_I2C                                                               05/28/2014 13:42:14 PAGE 8   

000C 54DF              ANL     A,#0DFH
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0011 90646B            MOV     DPTR,#0646BH
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
                                           ; SOURCE LINE # 287
0016 90647B            MOV     DPTR,#0647BH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
0021 9044D8            MOV     DPTR,#044D8H
0024 7401              MOV     A,#01H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0027 900000      R     MOV     DPTR,#MAG_I2C_state
002A 7410              MOV     A,#010H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
002D 22                RET     
             ; FUNCTION MAG_I2C_Stop (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    173    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
