C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE HMC5883L_I2C_MASTER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\HMC5883L_I2C_MASTER.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\HMC5883L_I2C_MASTER.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\HMC5883L_I
                    -2C_MASTER.lst) CD DB NOIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\HMC5
                    -883L_I2C_MASTER.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: HMC5883L_I2C_MASTER.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the source code of APIs for the I2C component Master mode.
   7          *
   8          * Note:
   9          *
  10          *******************************************************************************
  11          * Copyright 2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "HMC5883L_I2C_PVT.h"
  18          
  19          #if(HMC5883L_I2C_MODE_MASTER_ENABLED)
  20          
  21          /**********************************
  22          *      System variables
  23          **********************************/
  24          
  25          volatile uint8 HMC5883L_I2C_mstrStatus;     /* Master Status byte  */
  26          volatile uint8 HMC5883L_I2C_mstrControl;    /* Master Control byte */
  27          
  28          /* Transmit buffer variables */
  29          volatile uint8 * HMC5883L_I2C_mstrRdBufPtr;     /* Pointer to Master Read buffer */
  30          volatile uint8   HMC5883L_I2C_mstrRdBufSize;    /* Master Read buffer size       */
  31          volatile uint8   HMC5883L_I2C_mstrRdBufIndex;   /* Master Read buffer Index      */
  32          
  33          /* Receive buffer variables */
  34          volatile uint8 * HMC5883L_I2C_mstrWrBufPtr;     /* Pointer to Master Write buffer */
  35          volatile uint8   HMC5883L_I2C_mstrWrBufSize;    /* Master Write buffer size       */
  36          volatile uint8   HMC5883L_I2C_mstrWrBufIndex;   /* Master Write buffer Index      */
  37          
  38          
  39          /*******************************************************************************
  40          * Function Name: HMC5883L_I2C_MasterWriteBuf
  41          ********************************************************************************
  42          *
  43          * Summary:
  44          *  Automatically writes an entire buffer of data to a slave device. Once the
  45          *  data transfer is initiated by this function, further data transfer is handled
  46          *  by the included ISR in byte by byte mode.
  47          *
  48          * Parameters:
  49          *  slaveAddr: 7-bit slave address.
  50          *  xferData:  Pointer to buffer of data to be sent.
  51          *  cnt:       Size of buffer to send.
  52          *  mode:      Transfer mode defines: start or restart condition generation at
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 2   

  53          *             begin of the transfer and complete the transfer or halt before
  54          *             generating a stop.
  55          *
  56          * Return:
  57          *  Status error - zero means no errors.
  58          *
  59          * Side Effects:
  60          *  The included ISR will start transfer after start or restart condition will
  61          *  be generated.
  62          *
  63          * Global variables:
  64          *  HMC5883L_I2C_mstrStatus  - used to store current status of I2C Master.
  65          *  HMC5883L_I2C_state       - used to store current state of software FSM.
  66          *  HMC5883L_I2C_mstrControl - used to control master end of transaction with
  67          *  or without the Stop generation.
  68          *  HMC5883L_I2C_mstrWrBufPtr - used to store pointer to master write buffer.
  69          *  HMC5883L_I2C_mstrWrBufIndex - used to current index within master write
  70          *  buffer.
  71          *  HMC5883L_I2C_mstrWrBufSize - used to store master write buffer size.
  72          *
  73          * Reentrant:
  74          *  No
  75          *
  76          *******************************************************************************/
  77          uint8 HMC5883L_I2C_MasterWriteBuf(uint8 slaveAddress, uint8 * wrData, uint8 cnt, uint8 mode)
  78                
  79          {
  80   1          uint8 errStatus;
  81   1      
  82   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
  83   1      
  84   1          if(NULL != wrData)
  85   1          {
  86   2              /* Check I2C state before transfer: valid are IDLE or HALT */
  87   2              if(HMC5883L_I2C_SM_IDLE == HMC5883L_I2C_state)
  88   2              {
  89   3                  /* Check if free: Master is ready to transaction */
  90   3                  if(HMC5883L_I2C_CHECK_BUS_FREE(HMC5883L_I2C_MCSR_REG))
  91   3                  {
  92   4                      errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
  93   4                  }
  94   3                  else
  95   3                  {
  96   4                      errStatus = HMC5883L_I2C_MSTR_BUS_BUSY;
  97   4                  }
  98   3              }
  99   2              else if(HMC5883L_I2C_SM_MSTR_HALT == HMC5883L_I2C_state)
 100   2              {
 101   3                  errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 102   3      
 103   3                  CyIntClearPending(HMC5883L_I2C_ISR_NUMBER);
 104   3                  HMC5883L_I2C_mstrStatus &= ((uint8) ~HMC5883L_I2C_MSTAT_XFER_HALT);
 105   3              }
 106   2              else
 107   2              {
 108   3                  /* errStatus = HMC5883L_I2C_MSTR_NOT_READY was send before */
 109   3              }
 110   2      
 111   2              if(HMC5883L_I2C_MSTR_NO_ERROR == errStatus)
 112   2              {
 113   3                  HMC5883L_I2C_state    = HMC5883L_I2C_SM_MSTR_WR_ADDR;
 114   3                  HMC5883L_I2C_DATA_REG = ((uint8) (slaveAddress << HMC5883L_I2C_SLAVE_ADDR_SHIFT));
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 3   

 115   3      
 116   3                  HMC5883L_I2C_mstrWrBufIndex = 0u;
 117   3                  HMC5883L_I2C_mstrWrBufSize  = cnt;
 118   3                  HMC5883L_I2C_mstrWrBufPtr   = (volatile uint8 *) wrData;
 119   3      
 120   3                  HMC5883L_I2C_mstrControl = mode;    /* Save transaction mode */
 121   3      
 122   3                  /* Generate a Start or ReStart depends on mode */
 123   3                  if(HMC5883L_I2C_CHECK_RESTART(mode))
 124   3                  {
 125   4                      HMC5883L_I2C_GENERATE_RESTART;
 126   4                  }
 127   3                  else
 128   3                  {
 129   4                      HMC5883L_I2C_GENERATE_START;
 130   4                  }
 131   3      
 132   3                  HMC5883L_I2C_mstrStatus &= ((uint8) ~HMC5883L_I2C_MSTAT_WR_CMPLT);
 133   3      
 134   3                  HMC5883L_I2C_EnableInt();   /* Enable intr to complete transfer */
 135   3              }
 136   2          }
 137   1      
 138   1          return(errStatus);
 139   1      }
 140          
 141          
 142          /*******************************************************************************
 143          * Function Name: HMC5883L_I2C_MasterReadBuf
 144          ********************************************************************************
 145          *
 146          * Summary:
 147          *  Automatically writes an entire buffer of data to a slave device. Once the
 148          *  data transfer is initiated by this function, further data transfer is handled
 149          *  by the included ISR in byte by byte mode.
 150          *
 151          * Parameters:
 152          *  slaveAddr: 7-bit slave address.
 153          *  xferData:  Pointer to buffer where to put data from slave.
 154          *  cnt:       Size of buffer to read.
 155          *  mode:      Transfer mode defines: start or restart condition generation at
 156          *             begin of the transfer and complete the transfer or halt before
 157          *             generating a stop.
 158          *
 159          * Return:
 160          *  Status error - zero means no errors.
 161          *
 162          * Side Effects:
 163          *  The included ISR will start transfer after start or restart condition will
 164          *  be generated.
 165          *
 166          * Global variables:
 167          *  HMC5883L_I2C_mstrStatus  - used to store current status of I2C Master.
 168          *  HMC5883L_I2C_state       - used to store current state of software FSM.
 169          *  HMC5883L_I2C_mstrControl - used to control master end of transaction with
 170          *  or without the Stop generation.
 171          *  HMC5883L_I2C_mstrRdBufPtr - used to store pointer to master write buffer.
 172          *  HMC5883L_I2C_mstrRdBufIndex - used to current index within master write
 173          *  buffer.
 174          *  HMC5883L_I2C_mstrRdBufSize - used to store master write buffer size.
 175          *
 176          * Reentrant:
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 4   

 177          *  No
 178          *
 179          *******************************************************************************/
 180          uint8 HMC5883L_I2C_MasterReadBuf(uint8 slaveAddress, uint8 * rdData, uint8 cnt, uint8 mode)
 181                
 182          {
 183   1          uint8 errStatus;
 184   1      
 185   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
 186   1      
 187   1          if(NULL != rdData)
 188   1          {
 189   2              /* Check I2C state before transfer: valid are IDLE or HALT */
 190   2              if(HMC5883L_I2C_SM_IDLE == HMC5883L_I2C_state)
 191   2              {
 192   3                  /* Check if free: Master is ready to transaction */
 193   3                  if(HMC5883L_I2C_CHECK_BUS_FREE(HMC5883L_I2C_MCSR_REG))
 194   3                  {
 195   4                      errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 196   4                  }
 197   3                  else
 198   3                  {
 199   4                      errStatus = HMC5883L_I2C_MSTR_BUS_BUSY;
 200   4                  }
 201   3              }
 202   2              else if(HMC5883L_I2C_SM_MSTR_HALT == HMC5883L_I2C_state)
 203   2              {
 204   3                  errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 205   3      
 206   3                  CyIntClearPending(HMC5883L_I2C_ISR_NUMBER);
 207   3                  HMC5883L_I2C_mstrStatus &= ((uint8) ~HMC5883L_I2C_MSTAT_XFER_HALT);
 208   3              }
 209   2              else
 210   2              {
 211   3                  /* errStatus = HMC5883L_I2C_MSTR_NOT_READY was send before */
 212   3              }
 213   2      
 214   2              if(HMC5883L_I2C_MSTR_NO_ERROR == errStatus)
 215   2              {
 216   3                  HMC5883L_I2C_state    = HMC5883L_I2C_SM_MSTR_RD_ADDR;
 217   3                  HMC5883L_I2C_DATA_REG = (((uint8) (slaveAddress << HMC5883L_I2C_SLAVE_ADDR_SHIFT)) |
 218   3                                                         HMC5883L_I2C_READ_FLAG);
 219   3      
 220   3                  HMC5883L_I2C_mstrRdBufIndex  = 0u;
 221   3                  HMC5883L_I2C_mstrRdBufSize   = cnt;
 222   3                  HMC5883L_I2C_mstrRdBufPtr    = (volatile uint8 *) rdData;
 223   3      
 224   3                  HMC5883L_I2C_mstrControl = mode;    /* Save transaction mode */
 225   3      
 226   3                  /* Generate a Start or ReStart depends on mode */
 227   3                  if(HMC5883L_I2C_CHECK_RESTART(mode))
 228   3                  {
 229   4                      HMC5883L_I2C_GENERATE_RESTART;
 230   4                  }
 231   3                  else
 232   3                  {
 233   4                      HMC5883L_I2C_GENERATE_START;
 234   4                  }
 235   3      
 236   3                  HMC5883L_I2C_mstrStatus &= ((uint8) ~HMC5883L_I2C_MSTAT_RD_CMPLT);
 237   3      
 238   3                  HMC5883L_I2C_EnableInt();   /* Enable intr to complete transfer */
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 5   

 239   3              }
 240   2          }
 241   1      
 242   1          return(errStatus);
 243   1      }
 244          
 245          
 246          /*******************************************************************************
 247          * Function Name: HMC5883L_I2C_MasterSendStart
 248          ********************************************************************************
 249          *
 250          * Summary:
 251          *  Generates Start condition and sends slave address with read/write bit.
 252          *
 253          * Parameters:
 254          *  slaveAddress:  7-bit slave address.
 255          *  R_nW:          Zero, send write command, non-zero send read command.
 256          *
 257          * Return:
 258          *  Status error - zero means no errors.
 259          *
 260          * Side Effects:
 261          *  This function is entered without a 'byte complete' bit set in the I2C_CSR
 262          *  register. It does not exit until it will be set.
 263          *
 264          * Global variables:
 265          *  HMC5883L_I2C_state - used to store current state of software FSM.
 266          *
 267          * Reentrant:
 268          *  No
 269          *
 270          *******************************************************************************/
 271          uint8 HMC5883L_I2C_MasterSendStart(uint8 slaveAddress, uint8 R_nW)
 272                
 273          {
 274   1          uint8 errStatus;
 275   1      
 276   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
 277   1      
 278   1          /* If IDLE, check if bus is free */
 279   1          if(HMC5883L_I2C_SM_IDLE == HMC5883L_I2C_state)
 280   1          {
 281   2              /* If bus is free, generate Start condition */
 282   2              if(HMC5883L_I2C_CHECK_BUS_FREE(HMC5883L_I2C_MCSR_REG))
 283   2              {
 284   3                  HMC5883L_I2C_DisableInt();  /* Disable ISR for Manual functions */
 285   3      
 286   3                  slaveAddress = ((uint8) (slaveAddress << HMC5883L_I2C_SLAVE_ADDR_SHIFT)); /* Set Address */
 287   3                  if(0u != R_nW)                                      /* Set the Read/Write flag */
 288   3                  {
 289   4                      slaveAddress |= HMC5883L_I2C_READ_FLAG;
 290   4                      HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_RD_ADDR;
 291   4                  }
 292   3                  else
 293   3                  {
 294   4                      HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_WR_ADDR;
 295   4                  }
 296   3                  HMC5883L_I2C_DATA_REG = slaveAddress;   /* Write address to data reg */
 297   3      
 298   3      
 299   3                  HMC5883L_I2C_GENERATE_START;
 300   3                  while(HMC5883L_I2C_WAIT_BYTE_COMPLETE(HMC5883L_I2C_CSR_REG))
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 6   

 301   3                  {
 302   4                      ; /* Wait for the address to be transfered */
 303   4                  }
 304   3      
 305   3                  #if(HMC5883L_I2C_MODE_MULTI_MASTER_SLAVE_ENABLED)
                              if(HMC5883L_I2C_CHECK_START_GEN(HMC5883L_I2C_MCSR_REG))
                              {
                                  HMC5883L_I2C_CLEAR_START_GEN;
              
                                  /* Start condition was not generated: reset FSM to IDLE */
                                  HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
                                  errStatus = HMC5883L_I2C_MSTR_ERR_ABORT_START_GEN;
                              }
                              else
                          #endif /* (HMC5883L_I2C_MODE_MULTI_MASTER_SLAVE_ENABLED) */
 316   3      
 317   3                  #if(HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED)
              
                              if(HMC5883L_I2C_CHECK_LOST_ARB(HMC5883L_I2C_CSR_REG))
                              {
                                  HMC5883L_I2C_BUS_RELEASE;
              
                                  /* Master lost arbitrage: reset FSM to IDLE */
                                  HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
                                  errStatus = HMC5883L_I2C_MSTR_ERR_ARB_LOST;
                              }
                              else
                          #endif /* (HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED) */
 329   3      
 330   3                      if(HMC5883L_I2C_CHECK_ADDR_NAK(HMC5883L_I2C_CSR_REG))
 331   3                      {
 332   4                          /* Address has been NACKed: reset FSM to IDLE */
 333   4                          HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
 334   4                          errStatus = HMC5883L_I2C_MSTR_ERR_LB_NAK;
 335   4                      }
 336   3                      else
 337   3                      {
 338   4                          /* Start was sent witout errors */
 339   4                          errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 340   4                      }
 341   3              }
 342   2              else
 343   2              {
 344   3                  errStatus = HMC5883L_I2C_MSTR_BUS_BUSY; /* Bus is busy */
 345   3              }
 346   2          }
 347   1      
 348   1          return(errStatus);
 349   1      }
 350          
 351          
 352          /*******************************************************************************
 353          * Function Name: HMC5883L_I2C_MasterSendRestart
 354          ********************************************************************************
 355          *
 356          * Summary:
 357          *  Generates ReStart condition and sends slave address with read/write bit.
 358          *
 359          * Parameters:
 360          *  slaveAddress:  7-bit slave address.
 361          *  R_nW:          Zero, send write command, non-zero send read command.
 362          *
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 7   

 363          * Return:
 364          *  Status error - zero means no errors.
 365          *
 366          * Side Effects:
 367          *  This function is entered without a 'byte complete' bit set in the I2C_CSR
 368          *  register. It does not exit until it will be set.
 369          *
 370          * Global variables:
 371          *  HMC5883L_I2C_state - used to store current state of software FSM.
 372          *
 373          * Reentrant:
 374          *  No
 375          *
 376          *******************************************************************************/
 377          uint8 HMC5883L_I2C_MasterSendRestart(uint8 slaveAddress, uint8 R_nW)
 378                
 379          {
 380   1          uint8 errStatus;
 381   1      
 382   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
 383   1      
 384   1          /* Check if START condition was generated */
 385   1          if(HMC5883L_I2C_CHECK_MASTER_MODE(HMC5883L_I2C_MCSR_REG))
 386   1          {
 387   2              slaveAddress = ((uint8) (slaveAddress << HMC5883L_I2C_SLAVE_ADDR_SHIFT)); /* Set Address */
 388   2              if(0u != R_nW)  /* Set the Read/Write flag */
 389   2              {
 390   3                  slaveAddress |= HMC5883L_I2C_READ_FLAG;
 391   3                  HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_RD_ADDR;
 392   3              }
 393   2              else
 394   2              {
 395   3                  HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_WR_ADDR;
 396   3              }
 397   2              HMC5883L_I2C_DATA_REG = slaveAddress;    /* Write address to data reg */
 398   2      
 399   2      
 400   2              HMC5883L_I2C_GENERATE_RESTART_MANUAL;
 401   2              while(HMC5883L_I2C_WAIT_BYTE_COMPLETE(HMC5883L_I2C_CSR_REG))
 402   2              {
 403   3                  ; /* Wait for the address to be transfered */
 404   3              }
 405   2      
 406   2              #if(HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED)
                          if(HMC5883L_I2C_CHECK_LOST_ARB(HMC5883L_I2C_CSR_REG))
                          {
                              HMC5883L_I2C_BUS_RELEASE;
              
                              /* Master lost arbitrage: reset FSM to IDLE */
                              HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
                              errStatus = HMC5883L_I2C_MSTR_ERR_ARB_LOST;
                          }
                          else
                      #endif /* (HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED) */
 417   2      
 418   2                  if(HMC5883L_I2C_CHECK_ADDR_NAK(HMC5883L_I2C_CSR_REG))
 419   2                  {
 420   3                      /* Address has been NACKed: reset FSM to IDLE */
 421   3                      HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
 422   3                      errStatus = HMC5883L_I2C_MSTR_ERR_LB_NAK;
 423   3                  }
 424   2                  else
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 8   

 425   2                  {
 426   3                      /* ReStart was sent witout errors */
 427   3                      errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 428   3                  }
 429   2          }
 430   1      
 431   1          return(errStatus);
 432   1      }
 433          
 434          
 435          /*******************************************************************************
 436          * Function Name: HMC5883L_I2C_MasterSendStop
 437          ********************************************************************************
 438          *
 439          * Summary:
 440          *  Generates I2C Stop condition on bus. Function do nothing if Start or Restart
 441          *  condition was failed before call this function.
 442          *
 443          * Parameters:
 444          *  None
 445          *
 446          * Return:
 447          *  Status error - zero means no errors.
 448          *
 449          * Side Effects:
 450          *  The Stop generation is required to complete transaction.
 451          *  This function does not wait whileStop condition will be generated.
 452          *
 453          * Global variables:
 454          *  HMC5883L_I2C_state - used to store current state of software FSM.
 455          *
 456          * Reentrant:
 457          *  No
 458          *
 459          *******************************************************************************/
 460          uint8 HMC5883L_I2C_MasterSendStop(void) 
 461          {
 462   1          uint8 errStatus;
 463   1      
 464   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
 465   1      
 466   1          /* Check if START condition was generated */
 467   1          if(HMC5883L_I2C_CHECK_MASTER_MODE(HMC5883L_I2C_MCSR_REG))
 468   1          {
 469   2              HMC5883L_I2C_GENERATE_STOP_MANUAL;              /* Generate STOP */
 470   2              HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;  /* Reset state to IDLE */
 471   2      
 472   2              while(HMC5883L_I2C_WAIT_STOP_COMPLETE(HMC5883L_I2C_CSR_REG))
 473   2              {
 474   3                  ; /* Wait for Stop to be generated */
 475   3              }
 476   2      
 477   2              errStatus = HMC5883L_I2C_MSTR_NO_ERROR;
 478   2              #if(HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED)
                          if(HMC5883L_I2C_CHECK_LOST_ARB(HMC5883L_I2C_CSR_REG))
                          {
                              HMC5883L_I2C_BUS_RELEASE;
              
                              /* NACK was generated by enother instead Stop */
                              errStatus = HMC5883L_I2C_MSTR_ERR_ARB_LOST;
                          }
                      #endif /* (HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED) */
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 9   

 487   2          }
 488   1      
 489   1          return(errStatus);
 490   1      }
 491          
 492          
 493          /*******************************************************************************
 494          * Function Name: HMC5883L_I2C_MasterWriteByte
 495          ********************************************************************************
 496          *
 497          * Summary:
 498          *  Sends one byte to a slave. A valid Start or ReStart condition must be
 499          *  generated before this call this function. Function do nothing if Start or
 500          *  Restart condition was failed before call this function.
 501          *
 502          * Parameters:
 503          *  data:  The data byte to send to the slave.
 504          *
 505          * Return:
 506          *  Status error - zero means no errors.
 507          *
 508          * Side Effects:
 509          *  This function is entered without a 'byte complete' bit set in the I2C_CSR
 510          *  register. It does not exit until it will be set.
 511          *
 512          * Global variables:
 513          *  HMC5883L_I2C_state - used to store current state of software FSM.
 514          *
 515          *******************************************************************************/
 516          uint8 HMC5883L_I2C_MasterWriteByte(uint8 theByte) 
 517          {
 518   1          uint8 errStatus;
 519   1      
 520   1          errStatus = HMC5883L_I2C_MSTR_NOT_READY;
 521   1      
 522   1          /* Check if START condition was generated */
 523   1          if(HMC5883L_I2C_CHECK_MASTER_MODE(HMC5883L_I2C_MCSR_REG))
 524   1          {
 525   2              HMC5883L_I2C_DATA_REG = theByte;                        /* Write DATA register */
 526   2              HMC5883L_I2C_TRANSMIT_DATA_MANUAL;                      /* Set transmit mode */
 527   2              HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_WR_DATA;  /* Set state WR_DATA */
 528   2      
 529   2              /* Make sure the last byte has been transfered first */
 530   2              while(HMC5883L_I2C_WAIT_BYTE_COMPLETE(HMC5883L_I2C_CSR_REG))
 531   2              {
 532   3                  ; /* Wait for byte to be written */
 533   3              }
 534   2      
 535   2              #if(HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED)
                          if(HMC5883L_I2C_CHECK_LOST_ARB(HMC5883L_I2C_CSR_REG))
                          {
                              HMC5883L_I2C_BUS_RELEASE;
              
                              /* Master lost arbitrage: reset FSM to IDLE */
                              HMC5883L_I2C_state = HMC5883L_I2C_SM_IDLE;
                              errStatus = HMC5883L_I2C_MSTR_ERR_ARB_LOST;
                          }
                          /* Check LRB bit */
                          else
                      #endif /* (HMC5883L_I2C_MODE_MULTI_MASTER_ENABLED) */
 547   2      
 548   2                  if(HMC5883L_I2C_CHECK_DATA_ACK(HMC5883L_I2C_CSR_REG))
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 10  

 549   2                  {
 550   3                      HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_HALT;     /* Set state to HALT */
 551   3                      errStatus = HMC5883L_I2C_MSTR_NO_ERROR;                 /* The LRB was ACKed */
 552   3                  }
 553   2                  else
 554   2                  {
 555   3                      HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_HALT;     /* Set state to HALT */
 556   3                      errStatus = HMC5883L_I2C_MSTR_ERR_LB_NAK;               /* The LRB was NACKed */
 557   3                  }
 558   2          }
 559   1      
 560   1          return(errStatus);
 561   1      }
 562          
 563          
 564          /*******************************************************************************
 565          * Function Name: HMC5883L_I2C_MasterReadByte
 566          ********************************************************************************
 567          *
 568          * Summary:
 569          *  Reads one byte from a slave and ACK or NACK the transfer. A valid Start or
 570          *  ReStart condition must be generated before this call this function. Function
 571          *  do nothing if Start or Restart condition was failed before call this
 572          *  function.
 573          *
 574          * Parameters:
 575          *  acknNack:  Zero, response with NACK, if non-zero response with ACK.
 576          *
 577          * Return:
 578          *  Byte read from slave.
 579          *
 580          * Side Effects:
 581          *  This function is entered without a 'byte complete' bit set in the I2C_CSR
 582          *  register. It does not exit until it will be set.
 583          *
 584          * Global variables:
 585          *  HMC5883L_I2C_state - used to store current state of software FSM.
 586          *
 587          * Reentrant:
 588          *  No
 589          *
 590          *******************************************************************************/
 591          uint8 HMC5883L_I2C_MasterReadByte(uint8 acknNak) 
 592          {
 593   1          uint8 theByte;
 594   1      
 595   1          theByte = 0u;
 596   1      
 597   1          /* Check if START condition was generated */
 598   1          if(HMC5883L_I2C_CHECK_MASTER_MODE(HMC5883L_I2C_MCSR_REG))
 599   1          {
 600   2              /* When address phase need release the bus and receive the byte, then decide ACK or NACK */
 601   2              if(HMC5883L_I2C_SM_MSTR_RD_ADDR == HMC5883L_I2C_state)
 602   2              {
 603   3                  HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_RD_DATA;
 604   3                  HMC5883L_I2C_READY_TO_READ_MANUAL;
 605   3              }
 606   2      
 607   2              while(HMC5883L_I2C_WAIT_BYTE_COMPLETE(HMC5883L_I2C_CSR_REG))
 608   2              {
 609   3                  ; /* Wait for byte to be read */
 610   3              }
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 11  

 611   2      
 612   2              theByte = HMC5883L_I2C_DATA_REG;
 613   2      
 614   2              /* Now if the ACK flag was set, ACK the data which will release the bus and
 615   2                 start the next byte in otherwise do NOTHING to the CSR reg.
 616   2                 This will allow the calling routine to generate a repeat start or
 617   2                 stop depending on it's preference. */
 618   2              if(acknNak != 0u)   /* Do ACK */
 619   2              {
 620   3                  HMC5883L_I2C_ACK_AND_RECEIVE_MANUAL;
 621   3              }
 622   2              else                /* Do NACK */
 623   2              {
 624   3                  /* Do nothing to be able work with ReStart */
 625   3                  HMC5883L_I2C_state = HMC5883L_I2C_SM_MSTR_HALT;
 626   3              }
 627   2          }
 628   1      
 629   1          return(theByte);
 630   1      }
 631          
 632          
 633          /*******************************************************************************
 634          * Function Name: HMC5883L_I2C_MasterStatus
 635          ********************************************************************************
 636          *
 637          * Summary:
 638          *  Returns the master's communication status.
 639          *
 640          * Parameters:
 641          *  None
 642          *
 643          * Return:
 644          *  Current status of I2C master.
 645          *
 646          * Global variables:
 647          *  HMC5883L_I2C_mstrStatus - used to store current status of I2C Master.
 648          *
 649          *******************************************************************************/
 650          uint8 HMC5883L_I2C_MasterStatus(void) 
 651          {
 652   1          uint8 status;
 653   1      
 654   1          status = HMC5883L_I2C_mstrStatus;
 655   1      
 656   1          /* When in Master state only transaction is in progress */
 657   1          if(HMC5883L_I2C_CHECK_SM_MASTER)
 658   1          {
 659   2              /* Add transaction in progress activity to master status */
 660   2              status |= HMC5883L_I2C_MSTAT_XFER_INP;
 661   2          }
 662   1          else
 663   1          {
 664   2              /* Current master status is valid */
 665   2          }
 666   1      
 667   1          return(status);
 668   1      }
 669          
 670          
 671          /*******************************************************************************
 672          * Function Name: HMC5883L_I2C_MasterClearStatus
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 12  

 673          ********************************************************************************
 674          *
 675          * Summary:
 676          *  Clears all status flags and returns the master status.
 677          *
 678          * Parameters:
 679          *  None
 680          *
 681          * Return:
 682          *  Current status of I2C master.
 683          *
 684          * Global variables:
 685          *  HMC5883L_I2C_mstrStatus - used to store current status of I2C Master.
 686          *
 687          * Reentrant:
 688          *  No
 689          *
 690          *******************************************************************************/
 691          uint8 HMC5883L_I2C_MasterClearStatus(void) 
 692          {
 693   1          /* Current master status */
 694   1          uint8 status;
 695   1      
 696   1          /* Read and clear master status */
 697   1          status = HMC5883L_I2C_mstrStatus;
 698   1          HMC5883L_I2C_mstrStatus = HMC5883L_I2C_MSTAT_CLEAR;
 699   1      
 700   1          return(status);
 701   1      }
 702          
 703          
 704          /*******************************************************************************
 705          * Function Name: HMC5883L_I2C_MasterGetReadBufSize
 706          ********************************************************************************
 707          *
 708          * Summary:
 709          *  Returns the amount of bytes that has been transferred with an
 710          *  I2C_MasterReadBuf command.
 711          *
 712          * Parameters:
 713          *  None
 714          *
 715          * Return:
 716          *  Byte count of transfer. If the transfer is not yet complete, it will return
 717          *  the byte count transferred so far.
 718          *
 719          * Global variables:
 720          *  HMC5883L_I2C_mstrRdBufIndex - used to current index within master read
 721          *  buffer.
 722          *
 723          *******************************************************************************/
 724          uint8 HMC5883L_I2C_MasterGetReadBufSize(void) 
 725          {
 726   1          return(HMC5883L_I2C_mstrRdBufIndex);
 727   1      }
 728          
 729          
 730          /*******************************************************************************
 731          * Function Name: HMC5883L_I2C_MasterGetWriteBufSize
 732          ********************************************************************************
 733          *
 734          * Summary:
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 13  

 735          *  Returns the amount of bytes that has been transferred with an
 736          *  I2C_MasterWriteBuf command.
 737          *
 738          * Parameters:
 739          *  None
 740          *
 741          * Return:
 742          *  Byte count of transfer. If the transfer is not yet complete, it will return
 743          *  the byte count transferred so far.
 744          *
 745          * Global variables:
 746          *  HMC5883L_I2C_mstrWrBufIndex - used to current index within master write
 747          *  buffer.
 748          *
 749          *******************************************************************************/
 750          uint8 HMC5883L_I2C_MasterGetWriteBufSize(void) 
 751          {
 752   1          return(HMC5883L_I2C_mstrWrBufIndex);
 753   1      }
 754          
 755          
 756          /*******************************************************************************
 757          * Function Name: HMC5883L_I2C_MasterClearReadBuf
 758          ********************************************************************************
 759          *
 760          * Summary:
 761          *  Resets the read buffer pointer back to the first byte in the buffer.
 762          *
 763          * Parameters:
 764          *  None
 765          *
 766          * Return:
 767          *  None
 768          *
 769          * Global variables:
 770          *  HMC5883L_I2C_mstrRdBufIndex - used to current index within master read
 771          *   buffer.
 772          *  HMC5883L_I2C_mstrStatus - used to store current status of I2C Master.
 773          *
 774          * Reentrant:
 775          *  No
 776          *
 777          *******************************************************************************/
 778          void HMC5883L_I2C_MasterClearReadBuf(void) 
 779          {
 780   1          HMC5883L_I2C_mstrRdBufIndex = 0u;
 781   1          HMC5883L_I2C_mstrStatus    &= ((uint8) ~HMC5883L_I2C_MSTAT_RD_CMPLT);
 782   1      }
 783          
 784          
 785          /*******************************************************************************
 786          * Function Name: HMC5883L_I2C_MasterClearWriteBuf
 787          ********************************************************************************
 788          *
 789          * Summary:
 790          *  Resets the write buffer pointer back to the first byte in the buffer.
 791          *
 792          * Parameters:
 793          *  None
 794          *
 795          * Return:
 796          *  None
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 14  

 797          *
 798          * Global variables:
 799          *  HMC5883L_I2C_mstrRdBufIndex - used to current index within master read
 800          *   buffer.
 801          *  HMC5883L_I2C_mstrStatus - used to store current status of I2C Master.
 802          *
 803          * Reentrant:
 804          *  No
 805          *
 806          *******************************************************************************/
 807          void HMC5883L_I2C_MasterClearWriteBuf(void) 
 808          {
 809   1          HMC5883L_I2C_mstrWrBufIndex = 0u;
 810   1          HMC5883L_I2C_mstrStatus    &= ((uint8) ~HMC5883L_I2C_MSTAT_WR_CMPLT);
 811   1      }
 812          
 813          
 814          /*******************************************************************************
 815          * Function Name: HMC5883L_I2C_Workaround
 816          ********************************************************************************
 817          *
 818          * Summary:
 819          *  Do nothing. This fake fuction use as workaround for CDT 78083.
 820          *
 821          * Parameters:
 822          *  None
 823          *
 824          * Return:
 825          *  None
 826          *
 827          * Reentrant:
 828          *  No
 829          *
 830          *******************************************************************************/
 831          void HMC5883L_I2C_Workaround(void) 
 832          {
 833   1          /* Does nothing */
 834   1      }
 835          
 836          #endif /* (HMC5883L_I2C_MODE_MASTER_ENABLED) */
 837          
 838          
 839          /* [] END OF FILE */
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 15  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _HMC5883L_I2C_MasterWriteBuf (BEGIN)
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#slaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#wrData
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 82
000B 900000      R     MOV     DPTR,#errStatus
000E 7402              MOV     A,#02H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0011 7B00              MOV     R3,#00H
0013 7A00              MOV     R2,#00H
0015 7900              MOV     R1,#00H
0017 C003              PUSH    AR3
0019 C002              PUSH    AR2
001B C001              PUSH    AR1
001D 900000      R     MOV     DPTR,#wrData
0020 120000      E     LCALL   ?C?PLDXDATA
0023 D082              POP     DPL
0025 D083              POP     DPH
0027 D0E0              POP     ACC
0029 6B                XRL     A,R3
002A 7008              JNZ     ?C0122
002C E9                MOV     A,R1
002D 6582              XRL     A,DPL
002F 7003              JNZ     ?C0122
0031 EA                MOV     A,R2
0032 6583              XRL     A,DPH
0034         ?C0122:
0034 7003              JNZ     $ + 5H
0036 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 87
0039 900000      E     MOV     DPTR,#HMC5883L_I2C_state
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F B41018            CJNE    A,#010H,?C0002
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 90
0042 906464            MOV     DPTR,#06464H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 20E407            JB      ACC.4,?C0003
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
004B 900000      R     MOV     DPTR,#errStatus
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0050 802A              SJMP    ?C0005
0052         ?C0003:
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0052 900000      R     MOV     DPTR,#errStatus
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 16  

0055 7401              MOV     A,#01H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
0058 8022              SJMP    ?C0005
005A         ?C0002:
                                           ; SOURCE LINE # 99
005A 900000      E     MOV     DPTR,#HMC5883L_I2C_state
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 B46019            CJNE    A,#060H,?C0005
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0063 900000      R     MOV     DPTR,#errStatus
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0068 9044D8            MOV     DPTR,#044D8H
006B 7401              MOV     A,#01H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
006E 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 54F7              ANL     A,#0F7H
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 109
007C         ?C0005:
                                           ; SOURCE LINE # 111
007C 900000      R     MOV     DPTR,#errStatus
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 7074              JNZ     ?C0001
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
0084 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0087 7445              MOV     A,#045H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
008A 900000      R     MOV     DPTR,#slaveAddress
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 25E0              ADD     A,ACC
0092 FF                MOV     R7,A
0093 906400            MOV     DPTR,#06400H
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0098 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrWrBufIndex
009B E4                CLR     A
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
009D 900000      R     MOV     DPTR,#cnt
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 17  

00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrWrBufSize
00A5 EF                MOV     A,R7
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
00A7 900000      R     MOV     DPTR,#wrData
00AA 120000      E     LCALL   ?C?PLDXDATA
00AD 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrWrBufPtr
00B0 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 120
00B3 900000      R     MOV     DPTR,#mode
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrControl
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
00BD 900000      R     MOV     DPTR,#mode
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 EF                MOV     A,R7
00C3 5401              ANL     A,#01H
00C5 FF                MOV     R7,A
00C6 7E00              MOV     R6,#00H
00C8 EF                MOV     A,R7
00C9 4E                ORL     A,R6
00CA 600D              JZ      ?C0016
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
00CC 90647B            MOV     DPTR,#0647BH
00CF 7432              MOV     A,#032H
00D1 F0                MOVX    @DPTR,A
00D2 906450            MOV     DPTR,#06450H
00D5 E4                CLR     A
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
00D7 800B              SJMP    ?C0013
                                           ; SOURCE LINE # 128
00D9         ?C0016:
                                           ; SOURCE LINE # 129
00D9 90647B            MOV     DPTR,#0647BH
00DC 7482              MOV     A,#082H
00DE F0                MOVX    @DPTR,A
00DF 906450            MOV     DPTR,#06450H
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
00E4         ?C0013:
                                           ; SOURCE LINE # 132
00E4 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 EF                MOV     A,R7
00EA 54FD              ANL     A,#0FDH
00EC FF                MOV     R7,A
00ED 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
00F2 9044C0            MOV     DPTR,#044C0H
00F5 7401              MOV     A,#01H
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 18  

00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
00F8         ?C0001:
                                           ; SOURCE LINE # 138
00F8 900000      R     MOV     DPTR,#errStatus
00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
                                           ; SOURCE LINE # 139
00FD         ?C0017:
00FD 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterWriteBuf (END)

             ; FUNCTION _HMC5883L_I2C_MasterReadBuf (BEGIN)
                                           ; SOURCE LINE # 180
0000 900000      R     MOV     DPTR,#slaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rdData
0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 185
000B 900000      R     MOV     DPTR,#errStatus
000E 7402              MOV     A,#02H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
0011 7B00              MOV     R3,#00H
0013 7A00              MOV     R2,#00H
0015 7900              MOV     R1,#00H
0017 C003              PUSH    AR3
0019 C002              PUSH    AR2
001B C001              PUSH    AR1
001D 900000      R     MOV     DPTR,#rdData
0020 120000      E     LCALL   ?C?PLDXDATA
0023 D082              POP     DPL
0025 D083              POP     DPH
0027 D0E0              POP     ACC
0029 6B                XRL     A,R3
002A 7008              JNZ     ?C0123
002C E9                MOV     A,R1
002D 6582              XRL     A,DPL
002F 7003              JNZ     ?C0123
0031 EA                MOV     A,R2
0032 6583              XRL     A,DPH
0034         ?C0123:
0034 7003              JNZ     $ + 5H
0036 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
0039 900000      E     MOV     DPTR,#HMC5883L_I2C_state
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F B41018            CJNE    A,#010H,?C0019
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 193
0042 906464            MOV     DPTR,#06464H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 20E407            JB      ACC.4,?C0020
                                           ; SOURCE LINE # 194
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 19  

                                           ; SOURCE LINE # 195
004B 900000      R     MOV     DPTR,#errStatus
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
0050 802A              SJMP    ?C0022
0052         ?C0020:
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0052 900000      R     MOV     DPTR,#errStatus
0055 7401              MOV     A,#01H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0058 8022              SJMP    ?C0022
005A         ?C0019:
                                           ; SOURCE LINE # 202
005A 900000      E     MOV     DPTR,#HMC5883L_I2C_state
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 B46019            CJNE    A,#060H,?C0022
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0063 900000      R     MOV     DPTR,#errStatus
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0068 9044D8            MOV     DPTR,#044D8H
006B 7401              MOV     A,#01H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
006E 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 54F7              ANL     A,#0F7H
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 212
007C         ?C0022:
                                           ; SOURCE LINE # 214
007C 900000      R     MOV     DPTR,#errStatus
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 7078              JNZ     ?C0018
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0084 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0087 7449              MOV     A,#049H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
008A 900000      R     MOV     DPTR,#slaveAddress
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 25E0              ADD     A,ACC
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 20  

0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 4401              ORL     A,#01H
0096 FF                MOV     R7,A
0097 906400            MOV     DPTR,#06400H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
009C 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrRdBufIndex
009F E4                CLR     A
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
00A1 900000      R     MOV     DPTR,#cnt
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrRdBufSize
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
00AB 900000      R     MOV     DPTR,#rdData
00AE 120000      E     LCALL   ?C?PLDXDATA
00B1 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrRdBufPtr
00B4 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 224
00B7 900000      R     MOV     DPTR,#mode
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrControl
00BF EF                MOV     A,R7
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
00C1 900000      R     MOV     DPTR,#mode
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 5401              ANL     A,#01H
00C9 FF                MOV     R7,A
00CA 7E00              MOV     R6,#00H
00CC EF                MOV     A,R7
00CD 4E                ORL     A,R6
00CE 600D              JZ      ?C0033
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
00D0 90647B            MOV     DPTR,#0647BH
00D3 7432              MOV     A,#032H
00D5 F0                MOVX    @DPTR,A
00D6 906450            MOV     DPTR,#06450H
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
00DB 800B              SJMP    ?C0030
                                           ; SOURCE LINE # 232
00DD         ?C0033:
                                           ; SOURCE LINE # 233
00DD 90647B            MOV     DPTR,#0647BH
00E0 7482              MOV     A,#082H
00E2 F0                MOVX    @DPTR,A
00E3 906450            MOV     DPTR,#06450H
00E6 E4                CLR     A
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
00E8         ?C0030:
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 21  

                                           ; SOURCE LINE # 236
00E8 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED EF                MOV     A,R7
00EE 54FE              ANL     A,#0FEH
00F0 FF                MOV     R7,A
00F1 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
00F6 9044C0            MOV     DPTR,#044C0H
00F9 7401              MOV     A,#01H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
00FC         ?C0018:
                                           ; SOURCE LINE # 242
00FC 900000      R     MOV     DPTR,#errStatus
00FF E0                MOVX    A,@DPTR
0100 FF                MOV     R7,A
                                           ; SOURCE LINE # 243
0101         ?C0034:
0101 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterReadBuf (END)

             ; FUNCTION _HMC5883L_I2C_MasterSendStart (BEGIN)
                                           ; SOURCE LINE # 271
0000 900000      R     MOV     DPTR,#slaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#R_nW
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 276
000A 900000      R     MOV     DPTR,#errStatus
000D 7402              MOV     A,#02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
0010 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6410              XRL     A,#010H
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 282
001D 906464            MOV     DPTR,#06464H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 20E47C            JB      ACC.4,?C0036
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0026 9044C8            MOV     DPTR,#044C8H
0029 7401              MOV     A,#01H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
002C 900000      R     MOV     DPTR,#slaveAddress
002F E0                MOVX    A,@DPTR
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 22  

0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 25E0              ADD     A,ACC
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#slaveAddress
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
003A 900000      R     MOV     DPTR,#R_nW
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 6016              JZ      ?C0037
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0042 900000      R     MOV     DPTR,#slaveAddress
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 4401              ORL     A,#01H
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#slaveAddress
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0050 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0053 7449              MOV     A,#049H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
0056 8006              SJMP    ?C0038
0058         ?C0037:
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0058 900000      E     MOV     DPTR,#HMC5883L_I2C_state
005B 7445              MOV     A,#045H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
005E         ?C0038:
                                           ; SOURCE LINE # 296
005E 900000      R     MOV     DPTR,#slaveAddress
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 906400            MOV     DPTR,#06400H
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0068 90647B            MOV     DPTR,#0647BH
006B 7482              MOV     A,#082H
006D F0                MOVX    @DPTR,A
006E 906450            MOV     DPTR,#06450H
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073         ?C0042:
                                           ; SOURCE LINE # 300
0073 906464            MOV     DPTR,#06464H
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 30E0F7            JNB     ACC.0,?C0042
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 303
007C         ?C0043:
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 23  

                                           ; SOURCE LINE # 330
007C 906464            MOV     DPTR,#06464H
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 540A              ANL     A,#0AH
0084 FF                MOV     R7,A
0085 7E00              MOV     R6,#00H
0087 EF                MOV     A,R7
0088 640A              XRL     A,#0AH
008A 4E                ORL     A,R6
008B 700E              JNZ     ?C0044
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 333
008D 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0090 7410              MOV     A,#010H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0093 900000      R     MOV     DPTR,#errStatus
0096 7403              MOV     A,#03H
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0099 800D              SJMP    ?C0035
009B         ?C0044:
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 339
009B 900000      R     MOV     DPTR,#errStatus
009E E4                CLR     A
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
00A0 8006              SJMP    ?C0035
00A2         ?C0036:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
00A2 900000      R     MOV     DPTR,#errStatus
00A5 7401              MOV     A,#01H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
00A8         ?C0035:
                                           ; SOURCE LINE # 348
00A8 900000      R     MOV     DPTR,#errStatus
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
                                           ; SOURCE LINE # 349
00AD         ?C0047:
00AD 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterSendStart (END)

             ; FUNCTION _HMC5883L_I2C_MasterSendRestart (BEGIN)
                                           ; SOURCE LINE # 377
0000 900000      R     MOV     DPTR,#slaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#R_nW
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 382
000A 900000      R     MOV     DPTR,#errStatus
000D 7402              MOV     A,#02H
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 24  

000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0010 906464            MOV     DPTR,#06464H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 20E203            JB      ACC.2,$ + 6H
0019 020000      R     LJMP    ?C0048
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
001C 900000      R     MOV     DPTR,#slaveAddress
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 25E0              ADD     A,ACC
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#slaveAddress
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
002A 900000      R     MOV     DPTR,#R_nW
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 6016              JZ      ?C0049
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0032 900000      R     MOV     DPTR,#slaveAddress
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4401              ORL     A,#01H
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#slaveAddress
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
0040 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0043 7449              MOV     A,#049H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0046 8006              SJMP    ?C0050
0048         ?C0049:
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0048 900000      E     MOV     DPTR,#HMC5883L_I2C_state
004B 7445              MOV     A,#045H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
004E         ?C0050:
                                           ; SOURCE LINE # 397
004E 900000      R     MOV     DPTR,#slaveAddress
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 906400            MOV     DPTR,#06400H
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0058 90647B            MOV     DPTR,#0647BH
005B 7432              MOV     A,#032H
005D F0                MOVX    @DPTR,A
005E 906450            MOV     DPTR,#06450H
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 25  

0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063         ?C0057:
0063 906464            MOV     DPTR,#06464H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 20E0F7            JB      ACC.0,?C0057
006C         ?C0058:
006C         ?C0059:
                                           ; SOURCE LINE # 401
006C 906464            MOV     DPTR,#06464H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 30E0F7            JNB     ACC.0,?C0059
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 404
0075         ?C0060:
                                           ; SOURCE LINE # 418
0075 906464            MOV     DPTR,#06464H
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 540A              ANL     A,#0AH
007D FF                MOV     R7,A
007E 7E00              MOV     R6,#00H
0080 EF                MOV     A,R7
0081 640A              XRL     A,#0AH
0083 4E                ORL     A,R6
0084 700E              JNZ     ?C0061
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 421
0086 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0089 7410              MOV     A,#010H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
008C 900000      R     MOV     DPTR,#errStatus
008F 7403              MOV     A,#03H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0092 8005              SJMP    ?C0048
0094         ?C0061:
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 427
0094 900000      R     MOV     DPTR,#errStatus
0097 E4                CLR     A
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0099         ?C0048:
                                           ; SOURCE LINE # 431
0099 900000      R     MOV     DPTR,#errStatus
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
                                           ; SOURCE LINE # 432
009E         ?C0063:
009E 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterSendRestart (END)

             ; FUNCTION HMC5883L_I2C_MasterSendStop (BEGIN)
                                           ; SOURCE LINE # 460
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 26  

                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 464
0000 900000      R     MOV     DPTR,#errStatus
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0006 906464            MOV     DPTR,#06464H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 30E22E            JNB     ACC.2,?C0064
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
000F 90647B            MOV     DPTR,#0647BH
0012 7452              MOV     A,#052H
0014 F0                MOVX    @DPTR,A
0015 906450            MOV     DPTR,#06450H
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
001A         ?C0071:
001A 906464            MOV     DPTR,#06464H
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 20E0F7            JB      ACC.0,?C0071
0023         ?C0072:
0023         ?C0066:
                                           ; SOURCE LINE # 470
0023 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0026 7410              MOV     A,#010H
0028 F0                MOVX    @DPTR,A
0029         ?C0073:
                                           ; SOURCE LINE # 472
0029 906464            MOV     DPTR,#06464H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 5421              ANL     A,#021H
0031 FF                MOV     R7,A
0032 7E00              MOV     R6,#00H
0034 EF                MOV     A,R7
0035 4E                ORL     A,R6
0036 60F1              JZ      ?C0073
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 475
0038         ?C0074:
                                           ; SOURCE LINE # 477
0038 900000      R     MOV     DPTR,#errStatus
003B E4                CLR     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
003D         ?C0064:
                                           ; SOURCE LINE # 489
003D 900000      R     MOV     DPTR,#errStatus
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 490
0042         ?C0075:
0042 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterSendStop (END)

             ; FUNCTION _HMC5883L_I2C_MasterWriteByte (BEGIN)
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 27  

                                           ; SOURCE LINE # 516
0000 900000      R     MOV     DPTR,#theByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 520
0005 900000      R     MOV     DPTR,#errStatus
0008 7402              MOV     A,#02H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
000B 906464            MOV     DPTR,#06464H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 30E24F            JNB     ACC.2,?C0076
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0014 900000      R     MOV     DPTR,#theByte
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 906400            MOV     DPTR,#06400H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
001E 90647B            MOV     DPTR,#0647BH
0021 7406              MOV     A,#06H
0023 F0                MOVX    @DPTR,A
0024 906450            MOV     DPTR,#06450H
0027 E4                CLR     A
0028 F0                MOVX    @DPTR,A
0029         ?C0083:
0029 906464            MOV     DPTR,#06464H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 20E0F7            JB      ACC.0,?C0083
0032         ?C0084:
0032         ?C0078:
                                           ; SOURCE LINE # 527
0032 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0035 7446              MOV     A,#046H
0037 F0                MOVX    @DPTR,A
0038         ?C0085:
                                           ; SOURCE LINE # 530
0038 906464            MOV     DPTR,#06464H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E 30E0F7            JNB     ACC.0,?C0085
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 533
0041         ?C0086:
                                           ; SOURCE LINE # 548
0041 906464            MOV     DPTR,#06464H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 20E10D            JB      ACC.1,?C0087
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
004A 900000      E     MOV     DPTR,#HMC5883L_I2C_state
004D 7460              MOV     A,#060H
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 28  

004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
0050 900000      R     MOV     DPTR,#errStatus
0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0055 800C              SJMP    ?C0076
0057         ?C0087:
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0057 900000      E     MOV     DPTR,#HMC5883L_I2C_state
005A 7460              MOV     A,#060H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
005D 900000      R     MOV     DPTR,#errStatus
0060 7403              MOV     A,#03H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
0063         ?C0076:
                                           ; SOURCE LINE # 560
0063 900000      R     MOV     DPTR,#errStatus
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
                                           ; SOURCE LINE # 561
0068         ?C0089:
0068 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterWriteByte (END)

             ; FUNCTION _HMC5883L_I2C_MasterReadByte (BEGIN)
                                           ; SOURCE LINE # 591
0000 900000      R     MOV     DPTR,#acknNak
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 595
0005 900000      R     MOV     DPTR,#theByte
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
000A 906464            MOV     DPTR,#06464H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 30E25C            JNB     ACC.2,?C0090
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 601
0013 900000      E     MOV     DPTR,#HMC5883L_I2C_state
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B4491A            CJNE    A,#049H,?C0100
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
001C 900000      E     MOV     DPTR,#HMC5883L_I2C_state
001F 744A              MOV     A,#04AH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0022 90647B            MOV     DPTR,#0647BH
0025 7402              MOV     A,#02H
0027 F0                MOVX    @DPTR,A
0028 906450            MOV     DPTR,#06450H
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 29  

002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D         ?C0098:
002D 906464            MOV     DPTR,#06464H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 20E0F7            JB      ACC.0,?C0098
0036         ?C0099:
                                           ; SOURCE LINE # 605
0036         ?C0100:
                                           ; SOURCE LINE # 607
0036 906464            MOV     DPTR,#06464H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 30E0F7            JNB     ACC.0,?C0100
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 610
003F         ?C0101:
                                           ; SOURCE LINE # 612
003F 906400            MOV     DPTR,#06400H
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#theByte
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
0049 900000      R     MOV     DPTR,#acknNak
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 6018              JZ      ?C0102
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
0051 90647B            MOV     DPTR,#0647BH
0054 7402              MOV     A,#02H
0056 F0                MOVX    @DPTR,A
0057 906450            MOV     DPTR,#06450H
005A E4                CLR     A
005B F0                MOVX    @DPTR,A
005C         ?C0109:
005C 906464            MOV     DPTR,#06464H
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 30E00A            JNB     ACC.0,?C0090
0065 80F5              SJMP    ?C0109
0067         ?C0110:
                                           ; SOURCE LINE # 621
0067 8006              SJMP    ?C0090
0069         ?C0102:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 625
0069 900000      E     MOV     DPTR,#HMC5883L_I2C_state
006C 7460              MOV     A,#060H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 627
006F         ?C0090:
                                           ; SOURCE LINE # 629
006F 900000      R     MOV     DPTR,#theByte
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 30  

0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
                                           ; SOURCE LINE # 630
0074         ?C0112:
0074 22                RET     
             ; FUNCTION _HMC5883L_I2C_MasterReadByte (END)

             ; FUNCTION HMC5883L_I2C_MasterStatus (BEGIN)
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 654
0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
000A 900000      E     MOV     DPTR,#HMC5883L_I2C_state
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5440              ANL     A,#040H
0012 FF                MOV     R7,A
0013 7E00              MOV     R6,#00H
0015 EF                MOV     A,R7
0016 4E                ORL     A,R6
0017 600E              JZ      ?C0114
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 660
0019 900000      R     MOV     DPTR,#status
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 4404              ORL     A,#04H
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#status
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
0027         ?C0114:
                                           ; SOURCE LINE # 667
0027 900000      R     MOV     DPTR,#status
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
                                           ; SOURCE LINE # 668
002C         ?C0115:
002C 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterStatus (END)

             ; FUNCTION HMC5883L_I2C_MasterClearStatus (BEGIN)
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 697
0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 31  

                                           ; SOURCE LINE # 698
000A 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
000F 900000      R     MOV     DPTR,#status
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 701
0014         ?C0116:
0014 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterClearStatus (END)

             ; FUNCTION HMC5883L_I2C_MasterGetReadBufSize (BEGIN)
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrRdBufIndex
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 727
0005         ?C0117:
0005 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterGetReadBufSize (END)

             ; FUNCTION HMC5883L_I2C_MasterGetWriteBufSize (BEGIN)
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrWrBufIndex
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 753
0005         ?C0118:
0005 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterGetWriteBufSize (END)

             ; FUNCTION HMC5883L_I2C_MasterClearReadBuf (BEGIN)
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrRdBufIndex
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
0005 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FE              ANL     A,#0FEH
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
0013 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterClearReadBuf (END)

             ; FUNCTION HMC5883L_I2C_MasterClearWriteBuf (BEGIN)
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
C51 COMPILER V9.51   HMC5883L_I2C_MASTER                                                   07/17/2014 14:37:07 PAGE 32  

0000 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrWrBufIndex
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
0005 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FD              ANL     A,#0FDH
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#HMC5883L_I2C_mstrStatus
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0013 22                RET     
             ; FUNCTION HMC5883L_I2C_MasterClearWriteBuf (END)

             ; FUNCTION HMC5883L_I2C_Workaround (BEGIN)
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 834
0000 22                RET     
             ; FUNCTION HMC5883L_I2C_Workaround (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1253    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
